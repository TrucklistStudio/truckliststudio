/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

 /*
 * SourceControlTransitions.java
 *
 * Created on 23-Apr-2012, 11:28:40 AM
 */
package truckliststudio.components;

import java.awt.Font;
import java.util.ArrayList;
import org.apache.commons.io.FilenameUtils;
import static truckliststudio.TrucklistStudio.autoTitle;
import static truckliststudio.TrucklistStudio.busyTab;
import static truckliststudio.TrucklistStudio.lblText;
import static truckliststudio.TrucklistStudio.numTexts;
import static truckliststudio.TrucklistStudio.selColLbl2;
import static truckliststudio.TrucklistStudio.textDesktop;
import static truckliststudio.components.TrackPanel.master;
import truckliststudio.streams.SourceTrack;
import truckliststudio.streams.SourceMovie;
import truckliststudio.streams.SourceMusic;
import truckliststudio.streams.SourceText;
import truckliststudio.streams.Stream;
import truckliststudio.tracks.MasterTracks;

/**
 *
 * @author patrick
 */
public class SourceControlTracks extends javax.swing.JPanel {

    Stream source = null;

    /**
     * Creates new form SourceControlTransitions
     *
     * @param source
     */
    @SuppressWarnings("unchecked")
    public SourceControlTracks(Stream source) {
        initComponents();
        this.source = source;
        if (source instanceof SourceMovie || source instanceof SourceMusic) {
            if (source.getisATrack()) {
                btnMakeATrack.setEnabled(false);   
            }
        } else {
            btnMakeATrack.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnApplyAllCh = new javax.swing.JButton();
        btnApplyAllChSet = new javax.swing.JButton();
        btnApplyAllChPos = new javax.swing.JButton();
        btnMakeATrack = new javax.swing.JButton();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("truckliststudio/Languages"); // NOI18N
        setName(bundle.getString("CHANNELS_CTRL")); // NOI18N
        setPreferredSize(new java.awt.Dimension(400, 112));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Copy Current Stream Settings in All Tracks");
        jLabel1.setName("jLabel1"); // NOI18N

        btnApplyAllCh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/truckliststudio/resources/tango/chan-app4.png"))); // NOI18N
        btnApplyAllCh.setText("Copy State & Settings");
        btnApplyAllCh.setToolTipText("Stream Playing State, Settings & Content to all Tracks.");
        btnApplyAllCh.setName("btnApplyAllCh"); // NOI18N
        btnApplyAllCh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyAllChActionPerformed(evt);
            }
        });

        btnApplyAllChSet.setIcon(new javax.swing.ImageIcon(getClass().getResource("/truckliststudio/resources/tango/chan-app3.png"))); // NOI18N
        btnApplyAllChSet.setText("Copy Only Settings");
        btnApplyAllChSet.setToolTipText("Stream Settings & Content except the Playing State to all Tracks.");
        btnApplyAllChSet.setName("btnApplyAllChSet"); // NOI18N
        btnApplyAllChSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyAllChSetActionPerformed(evt);
            }
        });

        btnApplyAllChPos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/truckliststudio/resources/tango/chan-app5.png"))); // NOI18N
        btnApplyAllChPos.setText("Copy Only Style & Position");
        btnApplyAllChPos.setToolTipText("Stream Settings except the Text Content & Playing State to all Tracks.");
        btnApplyAllChPos.setName("btnApplyAllChPos"); // NOI18N
        btnApplyAllChPos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyAllChPosActionPerformed(evt);
            }
        });

        btnMakeATrack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/truckliststudio/resources/tango/chan-app6.png"))); // NOI18N
        btnMakeATrack.setText("Make a Track");
        btnMakeATrack.setToolTipText("Make a Track from the selected Stream.");
        btnMakeATrack.setName("btnMakeATrack"); // NOI18N
        btnMakeATrack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeATrackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnApplyAllCh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnApplyAllChSet, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 72, Short.MAX_VALUE))
                    .addComponent(btnApplyAllChPos, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMakeATrack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApplyAllCh, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApplyAllChSet, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApplyAllChPos, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMakeATrack, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyAllChActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyAllChActionPerformed
        SourceTrack sch = null;
        for (int i = 0; i < source.getTracks().size(); i++) {
            String scName = source.getTracks().get(i).getName();
            sch = SourceTrack.getTrack(scName, source);
            source.removeTrackAt(i);
            source.addTrackAt(sch, i);
        }
        String name = source.getName();
        if (name.length() > 25) {
            name = name.substring(0, 25) + " ...";
        }
        ResourceMonitorLabel label = new ResourceMonitorLabel(System.currentTimeMillis() + 10000, "<html><font color=" + selColLbl2 + ">\"" + name + "\"</font> copied to all Tracks.");
        ResourceMonitor.getInstance().addMessage(label);
    }//GEN-LAST:event_btnApplyAllChActionPerformed

    private void btnApplyAllChPosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyAllChPosActionPerformed
        SourceTrack sch = null;
        for (int i = 0; i < source.getTracks().size(); i++) {
            String scName = source.getTracks().get(i).getName();
            int oTime = source.getTracks().get(i).getDuration();
            String oCont = source.getTracks().get(i).getText();
            boolean isPlay = source.getTracks().get(i).getIsPlaying();
            sch = SourceTrack.getTrackIgnoreContent(scName, source);
            sch.setText(oCont);
            sch.setDuration(oTime);
            sch.setIsPlaying(isPlay);
            source.removeTrackAt(i);
            source.addTrackAt(sch, i);
        }
        String name = source.getName();
        if (name.length() > 25) {
            name = name.substring(0, 25) + " ...";
        }
        ResourceMonitorLabel label = new ResourceMonitorLabel(System.currentTimeMillis() + 10000, "<html><font color=" + selColLbl2 + ">\"" + name + "\"</font> copied to all Tracks.");
        ResourceMonitor.getInstance().addMessage(label);
    }//GEN-LAST:event_btnApplyAllChPosActionPerformed

    private void btnMakeATrackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeATrackActionPerformed
        TrackPanel.makeATrack(source);
        if (autoTitle && source.getisATrack()) {
            ArrayList<String> allChan = new ArrayList<>();
            for (String scn : MasterTracks.getInstance().getTracks()) {
                allChan.add(scn);
            }
            for (String sc : allChan) {
                source.addTrack(SourceTrack.getTrack(sc, source));
            }
            boolean isTitle = false;
            SourceText streamTXT = null;
            String trkName = source.getName();
            String trkTitle = FilenameUtils.removeExtension(trkName);
//                            System.out.println("TrackName=" + trkTitle);
            for (Stream str : master.getStreams()) {

                if (str.getisATitle() && !str.getClass().toString().contains("Sink")) {
//                                    System.out.println("Titles=" + str.getName());
                    streamTXT = (SourceText) str;
                    streamTXT.setContent(trkTitle);
                    streamTXT.setIsPlaying(true);
                    boolean wasStopped = true;
//                                    System.out.println("Source Name="+s.getName());

                    Stream playingStr = null;
                    for (Stream stream : master.getStreams()) {
                        if (stream.getisATrack() && stream.isPlaying()) {
                            playingStr = stream;
                            stream.setIsPlaying(false);
                        }
                    }

                    if (source.isPlaying()) {
                        wasStopped = false;
                    } else {
                        source.setIsPlaying(true);
                    }

                    master.updateTrack(trkName);

                    if (wasStopped) {
                        source.setIsPlaying(false);
                    }

                    if (playingStr != null) {
                        playingStr.setIsPlaying(true);
                    }

                    streamTXT.setIsPlaying(false);
                    isTitle = true;
                    break;
                }
            }
            if (!isTitle) {
                streamTXT = new SourceText(trkTitle);
                for (String scn : MasterTracks.getInstance().getTracks()) {
                    allChan.add(scn);
                }
                for (String sc : allChan) {
                    streamTXT.addTrack(SourceTrack.getTrack(sc, streamTXT));
                }
                streamTXT.setisATitle(true);
                streamTXT.setName("Titles");
                streamTXT.setZOrder(1);
                streamTXT.setIsPlaying(true);
                boolean wasStopped = true;
                if (source.isPlaying()) {
                    wasStopped = false;
                } else {
                    source.setIsPlaying(true);
                }
                master.updateTrack(trkName);
                if (wasStopped) {
                    source.setIsPlaying(false);
                }
                streamTXT.setIsPlaying(false);
                StreamPanelText txtTitle = new StreamPanelText((Stream) streamTXT);
                numTexts += 1;
                textDesktop.add(streamTXT.getName(), txtTitle);
                lblText.setForeground(busyTab);
                Font font = new Font("Ubuntu", Font.BOLD, 11);
                lblText.setFont(font);
                lblText.setText("Texts(" + numTexts + ")");
                txtTitle.setParent();
            }
        }
    }//GEN-LAST:event_btnMakeATrackActionPerformed

    private void btnApplyAllChSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyAllChSetActionPerformed
        SourceTrack sch = null;
        String selChName = TrackPanel.getSelectedTrack();
        for (int i = 0; i < source.getTracks().size(); i++) {
            String scName = source.getTracks().get(i).getName();
            boolean isPlay = source.getTracks().get(i).getIsPlaying();
            if (!selChName.equals(scName)) {
                sch = SourceTrack.getTrackIgnorePlay(scName, source);
                sch.setIsPlaying(isPlay);
                source.removeTrackAt(i);
                source.addTrackAt(sch, i);
            }
        }
        String name = source.getName();
        if (name.length() > 25) {
            name = name.substring(0, 25) + " ...";
        }
        ResourceMonitorLabel label = new ResourceMonitorLabel(System.currentTimeMillis() + 10000, "<html><font color=" + selColLbl2 + ">\"" + name + "\"</font> copied to all Tracks.");
        ResourceMonitor.getInstance().addMessage(label);
    }//GEN-LAST:event_btnApplyAllChSetActionPerformed

    @SuppressWarnings("deprecation")
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyAllCh;
    private javax.swing.JButton btnApplyAllChPos;
    private javax.swing.JButton btnApplyAllChSet;
    private javax.swing.JButton btnMakeATrack;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
